// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// proxy_delta
NumericVector proxy_delta(NumericVector Y, NumericMatrix X, double tau, NumericVector beta_in, NumericVector weights, int model, double delta, double lambda, NumericMatrix PeltyD, int maxint1, int maxint2, double threshold);
RcppExport SEXP _qrmono_proxy_delta(SEXP YSEXP, SEXP XSEXP, SEXP tauSEXP, SEXP beta_inSEXP, SEXP weightsSEXP, SEXP modelSEXP, SEXP deltaSEXP, SEXP lambdaSEXP, SEXP PeltyDSEXP, SEXP maxint1SEXP, SEXP maxint2SEXP, SEXP thresholdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type Y(YSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type beta_in(beta_inSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< int >::type model(modelSEXP);
    Rcpp::traits::input_parameter< double >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type PeltyD(PeltyDSEXP);
    Rcpp::traits::input_parameter< int >::type maxint1(maxint1SEXP);
    Rcpp::traits::input_parameter< int >::type maxint2(maxint2SEXP);
    Rcpp::traits::input_parameter< double >::type threshold(thresholdSEXP);
    rcpp_result_gen = Rcpp::wrap(proxy_delta(Y, X, tau, beta_in, weights, model, delta, lambda, PeltyD, maxint1, maxint2, threshold));
    return rcpp_result_gen;
END_RCPP
}
// proxy_xi
NumericVector proxy_xi(NumericVector Y, NumericMatrix X, double tau, NumericVector beta_in, NumericVector weights, int model, double eps, double lambda, NumericMatrix PeltyD, int maxint1, int maxint2, double threshold);
RcppExport SEXP _qrmono_proxy_xi(SEXP YSEXP, SEXP XSEXP, SEXP tauSEXP, SEXP beta_inSEXP, SEXP weightsSEXP, SEXP modelSEXP, SEXP epsSEXP, SEXP lambdaSEXP, SEXP PeltyDSEXP, SEXP maxint1SEXP, SEXP maxint2SEXP, SEXP thresholdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type Y(YSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type beta_in(beta_inSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< int >::type model(modelSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type PeltyD(PeltyDSEXP);
    Rcpp::traits::input_parameter< int >::type maxint1(maxint1SEXP);
    Rcpp::traits::input_parameter< int >::type maxint2(maxint2SEXP);
    Rcpp::traits::input_parameter< double >::type threshold(thresholdSEXP);
    rcpp_result_gen = Rcpp::wrap(proxy_xi(Y, X, tau, beta_in, weights, model, eps, lambda, PeltyD, maxint1, maxint2, threshold));
    return rcpp_result_gen;
END_RCPP
}
// checkloss
NumericVector checkloss(NumericVector res, double tau);
RcppExport SEXP _qrmono_checkloss(SEXP resSEXP, SEXP tauSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type res(resSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    rcpp_result_gen = Rcpp::wrap(checkloss(res, tau));
    return rcpp_result_gen;
END_RCPP
}
// proxy_inital
NumericVector proxy_inital(NumericVector Y, NumericMatrix X, double tau, NumericVector weights, int model, double delta, double lambda, NumericMatrix PeltyD, int maxint1, int maxint2, double threshold);
RcppExport SEXP _qrmono_proxy_inital(SEXP YSEXP, SEXP XSEXP, SEXP tauSEXP, SEXP weightsSEXP, SEXP modelSEXP, SEXP deltaSEXP, SEXP lambdaSEXP, SEXP PeltyDSEXP, SEXP maxint1SEXP, SEXP maxint2SEXP, SEXP thresholdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type Y(YSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< int >::type model(modelSEXP);
    Rcpp::traits::input_parameter< double >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type PeltyD(PeltyDSEXP);
    Rcpp::traits::input_parameter< int >::type maxint1(maxint1SEXP);
    Rcpp::traits::input_parameter< int >::type maxint2(maxint2SEXP);
    Rcpp::traits::input_parameter< double >::type threshold(thresholdSEXP);
    rcpp_result_gen = Rcpp::wrap(proxy_inital(Y, X, tau, weights, model, delta, lambda, PeltyD, maxint1, maxint2, threshold));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_qrmono_proxy_delta", (DL_FUNC) &_qrmono_proxy_delta, 12},
    {"_qrmono_proxy_xi", (DL_FUNC) &_qrmono_proxy_xi, 12},
    {"_qrmono_checkloss", (DL_FUNC) &_qrmono_checkloss, 2},
    {"_qrmono_proxy_inital", (DL_FUNC) &_qrmono_proxy_inital, 11},
    {NULL, NULL, 0}
};

RcppExport void R_init_qrmono(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
